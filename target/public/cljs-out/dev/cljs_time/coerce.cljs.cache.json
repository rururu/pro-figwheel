["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Date",["^ ","~$prototype",["^ ","~$cljs-time$coerce$ICoerce$",["^ "],"~$cljs-time$coerce$ICoerce$to_date_time$arity$1",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$second","~$extend"]],"~:name","~$cljs-time.coerce","~:imports",["^ ","~$UtcDateTime","~$goog.date.UtcDateTime"],"~:requires",["^ ","~$cljs-time.core","^B","~$time-fmt","~$cljs-time.format","^D","^D","^?","^@"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$from-default-time-zone","^B","~$minute","^B","~$hour","^B","~$day","^B","~$date-time","^B","^:","^B","~$month","^B","~$year","^B","~$to-utc-time-zone","^B","~$milli","^B"],"~:defs",["^ ","~$to-local-date",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","~:line",71,"~:column",7,"~:end-line",71,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^Z",[["~$obj"]]]]],"~:doc","Convert `obj` to a goog.date.Date instance"],"^<","~$cljs-time.coerce/to-local-date","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",20,"~:method-params",["^Z",[["^10"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^V",1,"~:variadic?",false,"^U",71,"~:ret-tag",["^9",[null,"~$goog.date/Date","~$clj-nil"]],"^W",71,"~:max-fixed-arity",1,"~:fn-var",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to a goog.date.Date instance"],"~$to-long",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",47,"^V",7,"^W",47,"^X",14,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to the number of milliseconds after the Unix epoch."],"^<","~$cljs-time.coerce/to-long","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",14,"^13",["^Z",[["^10"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",47,"^17",["^9",["~$any","^19"]],"^W",47,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to the number of milliseconds after the Unix epoch."],"~$from-date",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",41,"^V",7,"^W",41,"^X",16,"^Y",["^Z",["^[",["^Z",[["~$date"]]]]],"^11","Returns a DateTime instance in the UTC time zone corresponding to the given\n  js Date object."],"^<","~$cljs-time.coerce/from-date","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",16,"^13",["^Z",[["^1@"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",41,"^17",["^9",["^1>","^19"]],"^W",41,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^1@"]]]]],"^11","Returns a DateTime instance in the UTC time zone corresponding to the given\n  js Date object."],"~$to-local-date-time",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",80,"^V",7,"^W",80,"^X",25,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to a goog.date.DateTime instance"],"^<","~$cljs-time.coerce/to-local-date-time","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",25,"^13",["^Z",[["^10"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",80,"^17",["^9",["~$goog.date/DateTime","^19"]],"^W",80,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to a goog.date.DateTime instance"],"~$from-string",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",31,"^V",7,"^W",31,"^X",18,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^11","Returns DateTime instance from string using formatters in cljs-time.format,\n  returning first which parses"],"^<","~$cljs-time.coerce/from-string","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",18,"^13",["^Z",[["~$s"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",31,"^17",["^9",["^1>","^19"]],"^W",31,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^11","Returns DateTime instance from string using formatters in cljs-time.format,\n  returning first which parses"],"~$to-string",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",63,"^V",7,"^W",63,"^X",16,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Returns a string representation of obj in UTC time-zone\n  using \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\" date-time representation."],"^<","~$cljs-time.coerce/to-string","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",16,"^13",["^Z",[["^10"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",63,"^17",["^9",["^1>","^19"]],"^W",63,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Returns a string representation of obj in UTC time-zone\n  using \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\" date-time representation."],"~$to-date",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",58,"^V",7,"^W",58,"^X",14,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to a JavaScript Date instance."],"^<","~$cljs-time.coerce/to-date","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",14,"^13",["^Z",[["^10"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",58,"^17",["^9",["~$js/Date","^19"]],"^W",58,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to a JavaScript Date instance."],"~$from-long",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",25,"^V",7,"^W",25,"^X",16,"^Y",["^Z",["^[",["^Z",[["~$millis"]]]]],"^11","Returns a DateTime instance in the UTC time zone corresponding to the given\n  number of milliseconds after the Unix epoch."],"^<","~$cljs-time.coerce/from-long","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",16,"^13",["^Z",[["^1M"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",25,"^17",["^9",["^1>","^19"]],"^W",25,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^1M"]]]]],"^11","Returns a DateTime instance in the UTC time zone corresponding to the given\n  number of milliseconds after the Unix epoch."],"~$ICoerce",["^ ","^S",["^ ","~:protocol-symbol",true,"^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",21,"^V",14,"^U",22,"~:protocol-info",["^ ","~:methods",["^ ","~$to-date-time",[["^10"]]]],"^W",22,"~:sigs",["^ ","~:to-date-time",["^ ","^<","^1S","^Y",["^Z",[["^10"]]],"^11","Convert `obj` to a goog.date.DateTime instance."]],"~:jsdoc",["^Z",["@interface"]]],"^1P",true,"^<","~$cljs-time.coerce/ICoerce","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",21,"^V",1,"^U",22,"^1Q",["^ ","^1R",["^ ","^1S",[["^10"]]]],"~:info",null,"^W",22,"~:tag","^1>","^1T",["^ ","^1U",["^ ","^<","^1S","^Y",["^Z",[["^10"]]],"^11","Convert `obj` to a goog.date.DateTime instance."]],"~:impls",["^9",[null,"~$goog.date/UtcDateTime","^1K","^1D","~$number","^18","~$string"]],"^1V",["^Z",["@interface"]]],"^1S",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",23,"^V",4,"^W",23,"^X",16,"~:protocol","^1W","^11","Convert `obj` to a goog.date.DateTime instance.","^Y",["^Z",["^[",["^Z",[["^10"]]]]]],"^22","^1W","^<","~$cljs-time.coerce/to-date-time","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",16,"^13",["^Z",[["^10"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",22,"^17","^1>","^W",23,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to a goog.date.DateTime instance."],"~$to-epoch",["^ ","^R",null,"^S",["^ ","^T","/home/ru/clojure/pro-figwheel/target/public/cljs-out/dev/cljs_time/coerce.cljs","^U",52,"^V",7,"^W",52,"^X",15,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to Unix epoch."],"^<","~$cljs-time.coerce/to-epoch","^T","target/public/cljs-out/dev/cljs_time/coerce.cljs","^X",15,"^13",["^Z",[["^10"]]],"^14",null,"^15",["^Z",[null,null]],"^V",1,"^16",false,"^U",52,"^17",["^9",["^1>","^20","^19"]],"^W",52,"^1:",1,"^1;",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]],"^11","Convert `obj` to Unix epoch."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^9",["~:date-time","~:else"]],"~:order",["^2;","^2:"]],"^11","### Utilites to coerce goog.date DateTime instances to and from\n  various other types.\n\n  For example, to convert a goog.date DateTime to and from a js number:\n\n```clojure\n=> (to-long (date-time 1998 4 25))\n893462400000\n\n=> (from-long 893462400000)\n#<19980425T000000>\n```"]